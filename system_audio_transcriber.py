#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import speech_recognition as sr
import requests
import json
import threading
import time
import sys
from datetime import datetime
import sseclient
import pyaudio
import wave
import numpy as np

class SystemAudioTranscriber:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.rust_api_url = "http://127.0.0.1:3030"
        
        self.audio_format = pyaudio.paInt16
        self.channels = 2
        self.rate = 44100
        self.chunk_size = 1024
        self.recording = False
        
        self.audio = pyaudio.PyAudio()
        
        self.find_blackhole_device()
        
        self.check_rust_service()

    def find_blackhole_device(self):
        """–ù–∞—Ö–æ–¥–∏—Ç BlackHole –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        self.blackhole_device = None
        
        print("üîç –ò—â—É BlackHole —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...")
        
        for i in range(self.audio.get_device_count()):
            device_info = self.audio.get_device_info_by_index(i)
            device_name = device_info['name'].lower()
            
            print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {i}: {device_info['name']}")
            
            if 'blackhole' in device_name:
                self.blackhole_device = i
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ BlackHole —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_info['name']} (ID: {i})")
                break
        
        if self.blackhole_device is None:
            print("‚ùå BlackHole —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            print("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
            print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install blackhole-2ch")
            print("   2. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ Mac")
            print("   3. Audio MIDI Setup ‚Üí Create Multi-Output Device")
            print("   4. –í–∫–ª—é—á–∏—Ç–µ Built-in Output + BlackHole 2ch")
            print("   5. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —ç—Ç–æ—Ç Multi-Output –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã—Ö–æ–¥ –∑–≤—É–∫–∞")
            sys.exit(1)

    def check_rust_service(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Rust —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            print("üîó –ü—Ä–æ–≤–µ—Ä—è—é Rust —Å–µ—Ä–≤–∏—Å...")
            response = requests.get(f"{self.rust_api_url}/health", timeout=5)
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Rust —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {data.get('service', 'unknown')}")
            else:
                raise Exception(f"HTTP {response.status_code}")
        except Exception as e:
            print(f"‚ùå Rust —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cargo run")
            sys.exit(1)

    def record_system_audio(self, duration=30):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∞—É–¥–∏–æ"""
        try:
            print(f"\nüéß –ó–ê–•–í–ê–¢ –°–ò–°–¢–ï–ú–ù–û–ì–û –ó–í–£–ö–ê!")
            print(f"‚è±Ô∏è  –ú–∞–∫—Å–∏–º—É–º {duration} —Å–µ–∫—É–Ω–¥. –ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")
            print("üîä –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∑–≤—É–∫ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–¥—ë—Ç —á–µ—Ä–µ–∑ Multi-Output Device")
            
            stream = self.audio.open(
                format=self.audio_format,
                channels=self.channels,
                rate=self.rate,
                input=True,
                input_device_index=self.blackhole_device,
                frames_per_buffer=self.chunk_size
            )
            
            audio_data = []
            self.recording = True
            recording_complete = threading.Event()
            
            def record():
                try:
                    frames = []
                    start_time = time.time()
                    
                    while self.recording and (time.time() - start_time) < duration:
                        data = stream.read(self.chunk_size, exception_on_overflow=False)
                        frames.append(data)
                        
                        audio_array = np.frombuffer(data, dtype=np.int16)
                        volume = np.sqrt(np.mean(audio_array**2))
                        
                        if volume > 500:
                            print("üîâ", end="", flush=True)
                        else:
                            print(".", end="", flush=True)
                    
                    audio_data.extend(frames)
                    recording_complete.set()
                    
                except Exception as e:
                    print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
                    recording_complete.set()
            
            record_thread = threading.Thread(target=record)
            record_thread.daemon = True
            record_thread.start()
            
            input()
            self.recording = False
            print("\nüõë –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞...")
            
            recording_complete.wait(timeout=2)
            stream.close()
            
            if audio_data:
                temp_filename = "temp_system_audio.wav"
                with wave.open(temp_filename, 'wb') as wf:
                    wf.setnchannels(self.channels)
                    wf.setsampwidth(self.audio.get_sample_size(self.audio_format))
                    wf.setframerate(self.rate)
                    wf.writeframes(b''.join(audio_data))
                
                self.transcribe_system_audio(temp_filename)
            else:
                print("‚ùå –ê—É–¥–∏–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def transcribe_system_audio(self, audio_file):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∞—É–¥–∏–æ"""
        try:
            print("üîÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫...")
            
            with sr.AudioFile(audio_file) as source:
                audio = self.recognizer.record(source)
            
            text = self.recognizer.recognize_google(audio, language="ru-RU")
            text = text.strip()
            
            if not text:
                print("‚ö†Ô∏è –í –∑–∞–ø–∏—Å–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ—á—å")
                return
                
            print(f"üéØ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞: {text}")
            print("ü¶Ä –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Rust —Å–µ—Ä–≤–∏—Å...")
            print("-" * 80)
            
            self.send_to_rust_streaming(text)
            
            import os
            try:
                os.remove(audio_file)
            except:
                pass
                
        except sr.UnknownValueError:
            print("‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–Ω–æ–º –∑–≤—É–∫–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ —Ä–µ—á—å")
        except sr.RequestError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")

    def send_to_rust_streaming(self, question):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ Rust —Å–µ—Ä–≤–∏—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç streaming –æ—Ç–≤–µ—Ç"""
        try:
            payload = {"question": question}
            
            response = requests.post(
                f"{self.rust_api_url}/stream",
                json=payload,
                headers={"Accept": "text/event-stream"},
                stream=True,
                timeout=60
            )
            
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ Rust API: {response.status_code}")
                return
            
            client = sseclient.SSEClient(response)
            full_response = []
            
            for event in client.events():
                if event.data:
                    try:
                        data = json.loads(event.data)
                        
                        if data['type'] == 'word':
                            chunk = data['content']
                            print(chunk, end='', flush=True)
                            full_response.append(chunk)
                            
                        elif data['type'] == 'done':
                            print("\n" + "="*80)
                            print(f"üìÖ {datetime.now().strftime('%H:%M:%S')} - –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")
                            
                            clean_response = data['content']
                            
                            print(f"üí° –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {clean_response}")
                            print("="*80)
                            break
                            
                        elif data['type'] == 'error':
                            print(f"\n‚ùå –û—à–∏–±–∫–∞: {data['content']}")
                            break
                            
                    except json.JSONDecodeError:
                        continue
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Rust API: {e}")

    def monitor_system_audio(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ"""
        print("\nüéß –†–ï–ñ–ò–ú –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–ò–°–¢–ï–ú–ù–û–ì–û –ó–í–£–ö–ê")
        print("="*70)
        print("üí° –ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ —É—Å–ª—ã—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞")
        print("üîä –ó–≤—É–∫ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ —á–µ—Ä–µ–∑ Multi-Output Device —Å BlackHole")
        print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print("="*70)
        
        try:
            while True:
                input("\nüëâ –ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ö–≤–∞—Ç –∑–≤—É–∫–∞...")
                self.record_system_audio(duration=30)
                
        except KeyboardInterrupt:
            print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

    def show_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("\n" + "="*70)
        print("üéß –°–ò–°–¢–ï–ú–ù–´–ô –ê–£–î–ò–û –ü–û–ú–û–©–ù–ò–ö (Python + Rust)")
        print("="*70)
        print("1. üéØ –û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞—Ö–≤–∞—Ç (30 —Å–µ–∫)")
        print("2. üîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        print("3. üîß –ü–æ–∫–∞–∑–∞—Ç—å –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        print("4. üö™ –í—ã—Ö–æ–¥")
        print("="*70)

    def show_audio_devices(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        print("\nüì± –î–û–°–¢–£–ü–ù–´–ï –ê–£–î–ò–û –£–°–¢–†–û–ô–°–¢–í–ê:")
        print("="*50)
        
        for i in range(self.audio.get_device_count()):
            device_info = self.audio.get_device_info_by_index(i)
            device_type = "üé§" if device_info['maxInputChannels'] > 0 else "üîä"
            current = " ‚Üê –¢–ï–ö–£–©–ï–ï" if i == self.blackhole_device else ""
            
            print(f"{device_type} {i}: {device_info['name']}{current}")
        
        print("="*50)

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("üöÄ System Audio Transcriber + Rust Ollama Service")
        print("="*80)
        print("üéß –ó–∞—Ö–≤–∞—Ç: –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ (BlackHole)")
        print("ü¶Ä –û–±—Ä–∞–±–æ—Ç–∫–∞: Rust + Ollama")
        print("‚ö° –†–µ–∂–∏–º: Real-time streaming")
        print("="*80)

        try:
            while True:
                self.show_menu()
                
                try:
                    choice = input("\nüëâ –í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
                    
                    if choice == '1':
                        print("üéØ –†–µ–∂–∏–º: –û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞—Ö–≤–∞—Ç")
                        self.record_system_audio()
                    elif choice == '2':
                        print("üîÑ –†–µ–∂–∏–º: –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                        self.monitor_system_audio()
                    elif choice == '3':
                        self.show_audio_devices()
                    elif choice == '4':
                        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                    else:
                        print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 4")
                        
                except KeyboardInterrupt:
                    print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ Ctrl+C...")
                    break
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            self.audio.terminate()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ System Audio Transcriber...")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Rust —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω: cargo run")
    print("")
    
    required_packages = {
        'speech_recognition': 'SpeechRecognition',
        'sseclient': 'sseclient-py', 
        'requests': 'requests',
        'pyaudio': 'pyaudio',
        'numpy': 'numpy'
    }
    
    missing = []
    for module, package in required_packages.items():
        try:
            __import__(module)
        except ImportError:
            missing.append(package)
    
    if missing:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print(f"   pip install {' '.join(missing)}")
        sys.exit(1)
    
    transcriber = SystemAudioTranscriber()
    transcriber.run() 