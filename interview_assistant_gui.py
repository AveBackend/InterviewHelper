#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import threading
import time
import requests
import json
import speech_recognition as sr
import pyaudio
import wave
import numpy as np
import sseclient
from datetime import datetime
import sys
import os
import subprocess
import tempfile
import base64

class InterviewAssistantGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üéß Interview Assistant - System Audio")
        self.root.geometry("900x700")
        self.root.configure(bg='#2b2b2b')
        
        self.rust_api_url = "http://127.0.0.1:3030"
        self.recording = False
        self.generating = False
        self.blackhole_device = None
        
        self.selection_window = None
        self.selecting = False
        self.start_x = None
        self.start_y = None
        self.end_x = None
        self.end_y = None
        
        self.conversation_history = []
        self.max_history_length = 10
        self.context_enabled = True
        
        self.auto_scroll = True
        self.user_scrolling = False
        self.last_user_scroll_time = 0
        
        self.setup_audio()
        
        self.create_interface()
        
        self.check_services()

    def setup_audio(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.recognizer = sr.Recognizer()
            self.audio = pyaudio.PyAudio()
            self.find_blackhole_device()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ: {e}")
            sys.exit(1)

    def find_blackhole_device(self):
        """–ü–æ–∏—Å–∫ BlackHole —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        for i in range(self.audio.get_device_count()):
            device_info = self.audio.get_device_info_by_index(i)
            if 'blackhole' in device_info['name'].lower():
                self.blackhole_device = i
                return
        
        messagebox.showwarning(
            "BlackHole –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "BlackHole –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n\n"
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install blackhole-2ch\n"
            "2. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ Mac\n"
            "3. Audio MIDI Setup ‚Üí Create Multi-Output Device\n"
            "4. –í–∫–ª—é—á–∏—Ç–µ Built-in Output + BlackHole 2ch"
        )

    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        style = ttk.Style()
        style.theme_use('clam')
        
        title_frame = tk.Frame(self.root, bg='#2b2b2b')
        title_frame.pack(fill='x', padx=10, pady=5)
        
        title_label = tk.Label(
            title_frame,
            text="üéß Interview Assistant - System Audio",
            font=('Arial', 16, 'bold'),
            fg='#ffffff',
            bg='#2b2b2b'
        )
        title_label.pack()
        
        self.status_frame = tk.Frame(self.root, bg='#2b2b2b')
        self.status_frame.pack(fill='x', padx=10, pady=5)
        
        self.rust_status = tk.Label(
            self.status_frame,
            text="üîó Rust Service: –ü—Ä–æ–≤–µ—Ä–∫–∞...",
            font=('Arial', 10),
            fg='#ffaa00',
            bg='#2b2b2b'
        )
        self.rust_status.pack(side='left')
        
        self.audio_status = tk.Label(
            self.status_frame,
            text="üé§ BlackHole: –ü—Ä–æ–≤–µ—Ä–∫–∞...",
            font=('Arial', 10),
            fg='#ffaa00',
            bg='#2b2b2b'
        )
        self.audio_status.pack(side='right')
        
        self.history_status = tk.Label(
            self.status_frame,
            text="üí¨ –ò—Å—Ç–æ—Ä–∏—è: 0 —Å–æ–æ–±—â–µ–Ω–∏–π",
            font=('Arial', 10),
            fg='#4CAF50',
            bg='#2b2b2b'
        )
        self.history_status.pack(side='left', padx=(20, 0))
        
        control_frame = tk.Frame(self.root, bg='#2b2b2b')
        control_frame.pack(fill='x', padx=10, pady=10)
        
        self.record_button = tk.Button(
            control_frame,
            text="üé§ –ù–∞—á–∞—Ç—å –∑–∞—Ö–≤–∞—Ç –∑–≤—É–∫–∞",
            font=('Arial', 12, 'bold'),
            bg='#4CAF50',
            fg='white',
            activebackground='#45a049',
            command=self.toggle_recording,
            height=2,
            width=20
        )
        self.record_button.pack(side='left', padx=5)
        
        self.stop_generation_button = tk.Button(
            control_frame,
            text="‚èπÔ∏è –°—Ç–æ–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è",
            font=('Arial', 12, 'bold'),
            bg='#ff9800',
            fg='white',
            activebackground='#e68900',
            command=self.stop_generation,
            height=2,
            width=15,
            state='disabled'
        )
        self.stop_generation_button.pack(side='left', padx=5)
        
        self.clear_button = tk.Button(
            control_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
            font=('Arial', 12),
            bg='#f44336',
            fg='white',
            activebackground='#da190b',
            command=self.clear_log,
            height=2,
            width=12
        )
        self.clear_button.pack(side='right', padx=5)
        
        ocr_state = 'normal'
        
        self.quick_ocr_button = tk.Button(
            control_frame,
            text="‚ö° –ë—ã—Å—Ç—Ä—ã–π OCR",
            font=('Arial', 11, 'bold'),
            bg='#673AB7',
            fg='white',
            activebackground='#5E35B1',
            command=self.quick_ocr_capture,
            height=2,
            width=12,
            state=ocr_state
        )
        self.quick_ocr_button.pack(side='left', padx=2)
        
        self.context_toggle_button = tk.Button(
            control_frame,
            text="üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç: –í–ö–õ",
            font=('Arial', 10, 'bold'),
            bg='#4CAF50',
            fg='white',
            activebackground='#45a049',
            command=self.toggle_context,
            height=2,
            width=12
        )
        self.context_toggle_button.pack(side='left', padx=2)
        
        self.clear_history_button = tk.Button(
            control_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å\n–∏—Å—Ç–æ—Ä–∏—é",
            font=('Arial', 9, 'bold'),
            bg='#ff5722',
            fg='white',
            activebackground='#e64a19',
            command=self.clear_conversation_history,
            height=2,
            width=10
        )
        self.clear_history_button.pack(side='left', padx=2)
        
        self.auto_scroll_button = tk.Button(
            control_frame,
            text="üìú –ê–≤—Ç–æ-\n–ø—Ä–æ–∫—Ä—É—Ç–∫–∞",
            font=('Arial', 9, 'bold'),
            bg='#4CAF50',
            fg='white',
            activebackground='#45a049',
            command=self.toggle_auto_scroll,
            height=2,
            width=10
        )
        self.auto_scroll_button.pack(side='left', padx=2)
        
        image_frame = tk.Frame(self.root, bg='#2b2b2b')
        image_frame.pack(fill='x', padx=10, pady=5)
        
        tk.Label(
            image_frame,
            text="üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
            font=('Arial', 12, 'bold'),
            fg='#ffffff',
            bg='#2b2b2b'
        ).pack(anchor='w')
        
        self.drop_frame = tk.Frame(
            image_frame,
            bg='#404040',
            relief='ridge',
            bd=2,
            height=80
        )
        self.drop_frame.pack(fill='x', pady=5)
        self.drop_frame.pack_propagate(False)
        
        self.drop_label = tk.Label(
            self.drop_frame,
            text="üìÅ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞\n"
                 "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PNG, JPG, JPEG, GIF, BMP",
            font=('Arial', 10),
            fg='#cccccc',
            bg='#404040',
            justify='center'
        )
        self.drop_label.pack(expand=True)
        
        comment_frame = tk.Frame(image_frame, bg='#2b2b2b')
        comment_frame.pack(fill='x', pady=5)
        
        tk.Label(
            comment_frame,
            text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é:",
            font=('Arial', 10, 'bold'),
            fg='#ffffff',
            bg='#2b2b2b'
        ).pack(anchor='w')
        
        self.image_comment = tk.Text(
            comment_frame,
            height=2,
            wrap=tk.WORD,
            bg='#1e1e1e',
            fg='#ffffff',
            font=('Arial', 10),
            insertbackground='white'
        )
        self.image_comment.pack(fill='x', pady=2)
        
        self.setup_drag_drop()
        
        self.setup_hotkeys()
        
        question_frame = tk.Frame(self.root, bg='#2b2b2b')
        question_frame.pack(fill='x', padx=10, pady=5)
        
        tk.Label(
            question_frame,
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å:",
            font=('Arial', 12, 'bold'),
            fg='#ffffff',
            bg='#2b2b2b'
        ).pack(anchor='w')
        
        input_frame = tk.Frame(question_frame, bg='#2b2b2b')
        input_frame.pack(fill='x', pady=5)
        
        self.question_text = tk.Text(
            input_frame,
            height=3,
            wrap=tk.WORD,
            bg='#1e1e1e',
            fg='#ffffff',
            font=('Arial', 11),
            insertbackground='white'
        )
        self.question_text.pack(side='left', fill='both', expand=True, padx=(0, 5))
        
        self.send_button = tk.Button(
            input_frame,
            text="üì§\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
            font=('Arial', 10, 'bold'),
            bg='#2196F3',
            fg='white',
            activebackground='#1976D2',
            command=self.send_question,
            width=10
        )
        self.send_button.pack(side='right')
        
        self.paste_text_button = tk.Button(
            input_frame,
            text="üìã\n–í—Å—Ç–∞–≤–∏—Ç—å\n—Ç–µ–∫—Å—Ç",
            font=('Arial', 9, 'bold'),
            bg='#FF9800',
            fg='white',
            activebackground='#F57C00',
            command=self.paste_text_from_clipboard,
            width=8
        )
        self.paste_text_button.pack(side='right', padx=(0, 5))
        
        self.paste_image_button = tk.Button(
            input_frame,
            text="üñºÔ∏è\n–í—Å—Ç–∞–≤–∏—Ç—å\n–∫–∞—Ä—Ç–∏–Ω–∫—É",
            font=('Arial', 9, 'bold'),
            bg='#9C27B0',
            fg='white',
            activebackground='#7B1FA2',
            command=self.paste_image_from_clipboard,
            width=8
        )
        self.paste_image_button.pack(side='right', padx=(0, 5))
        
        self.recording_frame = tk.Frame(self.root, bg='#2b2b2b')
        self.recording_frame.pack(fill='x', padx=10, pady=5)
        
        self.recording_indicator = tk.Label(
            self.recording_frame,
            text="‚ö™ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏",
            font=('Arial', 12, 'bold'),
            fg='#888888',
            bg='#2b2b2b'
        )
        self.recording_indicator.pack()
        
        log_frame = tk.Frame(self.root, bg='#2b2b2b')
        log_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        log_header_frame = tk.Frame(log_frame, bg='#2b2b2b')
        log_header_frame.pack(fill='x')
        
        tk.Label(
            log_header_frame,
            text="üìã –õ–æ–≥ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤:",
            font=('Arial', 12, 'bold'),
            fg='#ffffff',
            bg='#2b2b2b'
        ).pack(side='left')
        
        self.jump_to_end_button = tk.Button(
            log_header_frame,
            text="‚¨áÔ∏è –í –∫–æ–Ω–µ—Ü",
            font=('Arial', 9, 'bold'),
            bg='#2196F3',
            fg='white',
            activebackground='#1976D2',
            command=self.jump_to_end,
            height=1,
            width=8
        )
        self.jump_to_end_button.pack(side='right')
        
        self.log_text = scrolledtext.ScrolledText(
            log_frame,
            wrap=tk.WORD,
            width=80,
            height=20,
            bg='#1e1e1e',
            fg='#ffffff',
            font=('Consolas', 11),
            insertbackground='white'
        )
        self.log_text.pack(fill='both', expand=True, pady=5)
        
        self.setup_scroll_tracking()
        
        settings_frame = tk.Frame(self.root, bg='#2b2b2b')
        settings_frame.pack(fill='x', padx=10, pady=5)
        
        tk.Label(
            settings_frame,
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
            font=('Arial', 10, 'bold'),
            fg='#ffffff',
            bg='#2b2b2b'
        ).pack(side='left')
        
        self.duration_var = tk.StringVar(value="30")
        tk.Label(
            settings_frame,
            text="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ (—Å–µ–∫):",
            font=('Arial', 10),
            fg='#ffffff',
            bg='#2b2b2b'
        ).pack(side='left', padx=(20, 5))
        
        duration_entry = tk.Entry(
            settings_frame,
            textvariable=self.duration_var,
            width=5,
            font=('Arial', 10)
        )
        duration_entry.pack(side='left')
        
        self.history_length_var = tk.StringVar(value="10")
        tk.Label(
            settings_frame,
            text="–î–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏:",
            font=('Arial', 10),
            fg='#ffffff',
            bg='#2b2b2b'
        ).pack(side='left', padx=(20, 5))
        
        history_entry = tk.Entry(
            settings_frame,
            textvariable=self.history_length_var,
            width=3,
            font=('Arial', 10)
        )
        history_entry.pack(side='left')
        
        history_entry.bind('<Return>', self.update_history_length)

    def check_services(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            response = requests.get(f"{self.rust_api_url}/health", timeout=5)
            if response.status_code == 200:
                self.rust_status.config(text="üîó Rust Service: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç", fg='#4CAF50')
            else:
                raise Exception(f"HTTP {response.status_code}")
        except Exception as e:
            self.rust_status.config(text="üîó Rust Service: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω", fg='#f44336')
            self.log("‚ùå Rust —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cargo run")
        
        if self.blackhole_device is not None:
            self.audio_status.config(text="üé§ BlackHole: ‚úÖ –ù–∞–π–¥–µ–Ω", fg='#4CAF50')
        else:
            self.audio_status.config(text="üé§ BlackHole: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω", fg='#f44336')
        
        self.update_history_status()
        
        self.update_send_button_state()

    def log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.smart_scroll_to_end()
        self.root.update_idletasks()

    def clear_log(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞"""
        self.log_text.delete(1.0, tk.END)

    def toggle_recording(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        if not self.recording:
            self.start_recording()
        else:
            self.stop_recording()

    def start_recording(self):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏"""
        if self.blackhole_device is None:
            messagebox.showerror("–û—à–∏–±–∫–∞", "BlackHole —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        self.recording = True
        self.record_button.config(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", bg='#f44336')
        self.recording_indicator.config(text="üî¥ –ó–∞–ø–∏—Å—å...", fg='#f44336')
        
        duration = int(self.duration_var.get())
        threading.Thread(target=self.record_audio, args=(duration,), daemon=True).start()

    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏"""
        self.recording = False
        self.record_button.config(text="üé§ –ù–∞—á–∞—Ç—å –∑–∞—Ö–≤–∞—Ç –∑–≤—É–∫–∞", bg='#4CAF50')
        self.recording_indicator.config(text="‚ö™ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", fg='#888888')

    def record_audio(self, duration=30):
        """–ó–∞–ø–∏—Å—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ"""
        try:
            self.log(f"üéß –ù–∞—á–∏–Ω–∞—é –∑–∞—Ö–≤–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ ({duration} —Å–µ–∫)")
            
            audio_format = pyaudio.paInt16
            channels = 2
            rate = 44100
            chunk_size = 1024
            
            stream = self.audio.open(
                format=audio_format,
                channels=channels,
                rate=rate,
                input=True,
                input_device_index=self.blackhole_device,
                frames_per_buffer=chunk_size
            )
            
            frames = []
            start_time = time.time()
            
            while self.recording and (time.time() - start_time) < duration:
                try:
                    data = stream.read(chunk_size, exception_on_overflow=False)
                    frames.append(data)
                    
                    audio_array = np.frombuffer(data, dtype=np.int16)
                    volume = np.sqrt(np.mean(audio_array**2))
                    
                    if volume > 500:
                        self.recording_indicator.config(text="üî¥ –ó–∞–ø–∏—Å—ã–≤–∞—é –∑–≤—É–∫...", fg='#4CAF50')
                    else:
                        self.recording_indicator.config(text="üî¥ –ñ–¥—É –∑–≤—É–∫...", fg='#f44336')
                        
                except Exception as e:
                    break
            
            stream.close()
            self.stop_recording()
            
            if frames:
                temp_filename = "temp_system_audio.wav"
                with wave.open(temp_filename, 'wb') as wf:
                    wf.setnchannels(channels)
                    wf.setsampwidth(self.audio.get_sample_size(audio_format))
                    wf.setframerate(rate)
                    wf.writeframes(b''.join(frames))
                
                self.transcribe_audio(temp_filename)
            else:
                self.log("‚ùå –ê—É–¥–∏–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
            self.stop_recording()

    def transcribe_audio(self, audio_file):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        try:
            self.log("üîÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ...")
            
            with sr.AudioFile(audio_file) as source:
                audio = self.recognizer.record(source)
            
            text = self.recognizer.recognize_google(audio, language="ru-RU")
            text = text.strip()
            
            if not text:
                self.log("‚ö†Ô∏è –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
                return
            
            self.log(f"üéØ –í–æ–ø—Ä–æ—Å: {text}")
            
            self.question_text.delete(1.0, tk.END)
            self.question_text.insert(1.0, text)
            
            self.log("ü¶Ä –ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç –æ—Ç AI...")
            
            self.get_ai_response(text)
            
            try:
                os.remove(audio_file)
            except:
                pass
                
        except sr.UnknownValueError:
            self.log("‚ö†Ô∏è –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
        except sr.RequestError as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ API —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")

    def get_ai_response(self, question):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI"""
        try:
            self.generating = True
            self.stop_generation_button.config(state='normal')
            
            self.update_send_button_state()
            
            self.conversation_history.append({
                "role": "user", 
                "content": question,
                "timestamp": datetime.now().isoformat()
            })
            
            if len(self.conversation_history) > self.max_history_length * 2:
                self.conversation_history = self.conversation_history[-self.max_history_length * 2:]
            
            self.update_history_status()
            
            self.log_conversation_context()
            
            payload = {
                "question": question,
                "conversation_history": self.conversation_history if self.context_enabled else [],
                "context_enabled": self.context_enabled
            }
            
            response = requests.post(
                f"{self.rust_api_url}/stream",
                json=payload,
                headers={"Accept": "text/event-stream"},
                stream=True,
                timeout=60
            )
            
            if response.status_code != 200:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                self.generating = False
                self.stop_generation_button.config(state='disabled')
                self.update_send_button_state()
                return
            
            timestamp = datetime.now().strftime("%H:%M:%S")
            self.log_text.insert(tk.END, f"[{timestamp}] üí≠ –û—Ç–≤–µ—Ç AI: ")
            self.smart_scroll_to_end()
            
            full_response = ""
            
            client = sseclient.SSEClient(response)
            
            for event in client.events():
                if not self.generating:
                    self.log_text.insert(tk.END, " [–û–°–¢–ê–ù–û–í–õ–ï–ù–û]\n")
                    break
                    
                if event.data:
                    try:
                        data = json.loads(event.data)
                        
                        if data['type'] == 'word':
                            chunk = data['content']
                            full_response += chunk
                            self.log_text.insert(tk.END, chunk)
                            self.smart_scroll_to_end()
                            self.root.update_idletasks()
                            
                        elif data['type'] == 'done':
                            final_answer = data['content']
                            self.log_text.insert(tk.END, "\n")
                            self.log(f"‚úÖ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {final_answer}")
                            
                            if self.context_enabled:
                                self.conversation_history.append({
                                    "role": "assistant",
                                    "content": final_answer or full_response,
                                    "timestamp": datetime.now().isoformat()
                                })
                                self.update_history_status()
                            
                            self.log("="*60)
                            break
                            
                        elif data['type'] == 'error':
                            self.log_text.insert(tk.END, "\n")
                            self.log(f"‚ùå –û—à–∏–±–∫–∞ AI: {data['content']}")
                            break
                            
                    except json.JSONDecodeError:
                        continue
                        
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
        finally:
            self.generating = False
            self.stop_generation_button.config(state='disabled')
            self.update_send_button_state()

    def update_send_button_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        if self.generating:
            self.send_button.config(
                text="‚èπÔ∏è\n–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å",
                bg='#FF5722',
                activebackground='#E64A19'
            )
        else:
            self.send_button.config(
                text="üì§\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                bg='#2196F3',
                activebackground='#1976D2'
            )

    def update_streaming_response(self, response_text):
        """–£–¥–∞–ª–µ–Ω–∞ - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"""
        pass

    def update_last_line(self, new_text):
        """–£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —É–¥–∞–ª–µ–Ω–∞"""
        pass

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.log("üöÄ Interview Assistant –∑–∞–ø—É—â–µ–Ω!")
        self.log("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        self.log("   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∑–≤—É–∫ –∏–¥–µ—Ç —á–µ—Ä–µ–∑ Multi-Output Device")
        self.log("   2. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∑–∞—Ö–≤–∞—Ç –∑–≤—É–∫–∞'")
        self.log("   3. –ì–æ–≤–æ—Ä–∏—Ç–µ –∏–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
        self.log("   4. –ù–∞–∂–º–∏—Ç–µ '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å' –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ—Å—Ç–æ–ø–∞")
        self.log("   5. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–±–ª–∞—Å—Ç—å drag&drop –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        self.log("‚å®Ô∏è  –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:")
        self.log("   ‚Ä¢ Cmd+V - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")
        self.log("   ‚Ä¢ Cmd+Shift+V - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        self.log("üí° –ë—ã—Å—Ç—Ä—ã–π OCR: Cmd+Shift+4 ‚Üí –≤—ã–¥–µ–ª–∏—Ç—å ‚Üí Cmd+V")
        self.log("üß† –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:")
        self.log("   ‚Ä¢ AI –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã")
        self.log("   ‚Ä¢ –ö–Ω–æ–ø–∫–∞ '–ö–æ–Ω—Ç–µ–∫—Å—Ç' - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–∞–º—è—Ç—å")
        self.log("   ‚Ä¢ –ö–Ω–æ–ø–∫–∞ '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é' - —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å")
        self.log("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '–î–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏' - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        self.log("üìú –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π:")
        self.log("   ‚Ä¢ –ö–Ω–æ–ø–∫–∞ '–ê–≤—Ç–æ-–ø—Ä–æ–∫—Ä—É—Ç–∫–∞' - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É")
        self.log("   ‚Ä¢ –ö–Ω–æ–ø–∫–∞ '‚¨áÔ∏è –í –∫–æ–Ω–µ—Ü' - –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º")
        self.log("   ‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–µ")
        self.log("="*60)
        
        self.root.mainloop()

    def stop_generation(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        self.generating = False
        self.stop_generation_button.config(state='disabled')
        self.update_send_button_state()
        self.log("üõë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    def send_question(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        question = self.question_text.get(1.0, tk.END).strip()
        if not question:
            messagebox.showwarning("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å", "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ")
            return
        
        if self.generating:
            self.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞...")
            self.generating = False
            self.root.after(100, lambda: self._send_new_question(question))
        else:
            self._send_new_question(question)

    def _send_new_question(self, question):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥)"""
        self.log(f"‚úèÔ∏è –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {question}")
        self.log("ü¶Ä –ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç –æ—Ç AI...")
        
        threading.Thread(target=self.get_ai_response, args=(question,), daemon=True).start()

    def setup_drag_drop(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag&drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        self.drop_label.bind('<Button-1>', self.select_image_file)
        self.drop_frame.bind('<Button-1>', self.select_image_file)
        
        self.drop_label.bind('<Button-1>', self.select_image_file)

    def select_image_file(self, event=None):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                initialdir=os.path.expanduser("~/Desktop"),
                filetypes=[
                    ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png *.jpg *.jpeg *.gif *.bmp"),
                    ("PNG —Ñ–∞–π–ª—ã", "*.png"),
                    ("JPG —Ñ–∞–π–ª—ã", "*.jpg *.jpeg"),
                    ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
                ]
            )
            
            if file_path:
                self.process_image_file(file_path)
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")

    def process_image_file(self, file_path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            self.log(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {os.path.basename(file_path)}")
            
            self.drop_label.config(
                text=f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {os.path.basename(file_path)}\n"
                     "–ù–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ —Ñ–∞–π–ª–∞",
                fg='#90EE90'
            )
            
            threading.Thread(target=self.perform_ocr_analysis, args=(file_path,), daemon=True).start()
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    def perform_ocr_analysis(self, image_path):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ OCR –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            self.log("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            user_comment = self.image_comment.get(1.0, tk.END).strip()
            
            extracted_text = ""
            
            extracted_text = self.extract_text_online_ocr(image_path)
            
            if not extracted_text:
                extracted_text = self.manual_text_input(image_path)
            
            if extracted_text:
                self.log(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {extracted_text}")
                
                if user_comment:
                    final_query = f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_comment}\n\n–¢–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {extracted_text}"
                else:
                    final_query = f"–¢–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {extracted_text}"
                
                self.question_text.delete(1.0, tk.END)
                self.question_text.insert(1.0, final_query)
                
                self.log("ü¶Ä –ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç –æ—Ç AI...")
                
                self.get_ai_response(final_query)
            else:
                self.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ OCR –∞–Ω–∞–ª–∏–∑–∞: {e}")

    def extract_text_online_ocr(self, image_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ online OCR API"""
        try:
            self.log("üåê –ü—Ä–æ–±—É—é online OCR...")
            
            url = "https://api.ocr.space/parse/image"
            
            with open(image_path, 'rb') as f:
                files = {'file': f}
                data = {
                    'apikey': 'helloworld',
                    'language': 'rus',
                    'OCREngine': '2'
                }
                
                response = requests.post(url, files=files, data=data, timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get('OCRExitCode') == 1:
                        text = ""
                        for parsed_result in result.get('ParsedResults', []):
                            text += parsed_result.get('ParsedText', '')
                        return text.strip()
                
            return ""
            
        except Exception as e:
            self.log(f"‚ö†Ô∏è Online OCR –æ—à–∏–±–∫–∞: {e}")
            return ""

    def manual_text_input(self, image_path):
        """–†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            subprocess.run(['open', image_path])
            
            result = messagebox.askquestion(
                "–†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞",
                "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–µ.\n\n"
                "Online OCR –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.\n"
                "–•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é?"
            )
            
            if result == 'yes':
                text_window = tk.Toplevel(self.root)
                text_window.title("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                text_window.geometry("500x300")
                text_window.configure(bg='#2b2b2b')
                
                tk.Label(
                    text_window,
                    text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–∏—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:",
                    font=('Arial', 12),
                    fg='#ffffff',
                    bg='#2b2b2b'
                ).pack(pady=10)
                
                text_input = tk.Text(
                    text_window,
                    height=10,
                    wrap=tk.WORD,
                    bg='#1e1e1e',
                    fg='#ffffff',
                    font=('Arial', 11),
                    insertbackground='white'
                )
                text_input.pack(fill='both', expand=True, padx=10, pady=5)
                
                result_text = {"text": ""}
                
                def save_text():
                    result_text["text"] = text_input.get(1.0, tk.END).strip()
                    text_window.destroy()
                
                def cancel_input():
                    text_window.destroy()
                
                button_frame = tk.Frame(text_window, bg='#2b2b2b')
                button_frame.pack(pady=10)
                
                tk.Button(
                    button_frame,
                    text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                    command=save_text,
                    bg='#4CAF50',
                    fg='white',
                    font=('Arial', 10, 'bold')
                ).pack(side='left', padx=5)
                
                tk.Button(
                    button_frame,
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    command=cancel_input,
                    bg='#f44336',
                    fg='white',
                    font=('Arial', 10, 'bold')
                ).pack(side='left', padx=5)
                
                text_input.focus_set()
                text_window.wait_window()
                
                return result_text["text"]
            
            return ""
            
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞: {e}")
            return ""

    def paste_text_from_clipboard(self, event=None):
        """–í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            clipboard_text = self.root.clipboard_get()
            
            if clipboard_text:
                self.question_text.insert(tk.END, clipboard_text)
                self.log("üìù –¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
            else:
                messagebox.showwarning("–ü—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä", "–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")

    def paste_image_from_clipboard(self, event=None):
        """–í—Å—Ç–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            self.log("üñºÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            temp_image_path = self.save_clipboard_image_macos()
            
            if temp_image_path:
                self.log("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞")
                self.process_image_file(temp_image_path)
            else:
                self.suggest_screenshot_alternative()
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    def save_clipboard_image_macos(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –Ω–∞ macOS"""
        try:
            temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
            temp_file.close()
            
            result = subprocess.run([
                'osascript', '-e',
                f'try\n'
                f'    set theImage to the clipboard as ¬´class PNGf¬ª\n'
                f'    set theFile to open for access POSIX file "{temp_file.name}" with write permission\n'
                f'    write theImage to theFile\n'
                f'    close access theFile\n'
                f'    return "success"\n'
                f'on error\n'
                f'    return "error"\n'
                f'end try'
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0 and "success" in result.stdout:
                return temp_file.name
            else:
                try:
                    os.unlink(temp_file.name)
                except:
                    pass
                return None
                
        except Exception as e:
            self.log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            return None

    def suggest_screenshot_alternative(self):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        self.log("üí° –í –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        result = messagebox.askquestion(
            "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
            "–í –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n"
            "–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç?\n\n"
            "–î–ê - –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç (Cmd+Shift+4)\n"
            "–ù–ï–¢ - –û—Ç–º–µ–Ω–∞"
        )
        
        if result == 'yes':
            self.log("üì∏ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Cmd+Shift+4 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
            self.log("üìã –°–∫—Ä–∏–Ω—à–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            self.log("üîÑ –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É' —Å–Ω–æ–≤–∞")
            
            messagebox.showinfo(
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                "1. –ù–∞–∂–º–∏—Ç–µ Cmd+Shift+4\n"
                "2. –í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞\n"
                "3. –°–∫—Ä–∏–Ω—à–æ—Ç —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞\n"
                "4. –ù–∞–∂–º–∏—Ç–µ '–í—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É' —Å–Ω–æ–≤–∞"
            )

    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        self.root.bind('<Command-v>', self.auto_paste_from_clipboard)
        self.root.bind('<Command-Shift-v>', self.paste_image_from_clipboard)
        
        self.root.focus_set()

    def auto_paste_from_clipboard(self, event=None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)"""
        try:
            self.log("üìã –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞...")
            
            temp_image_path = self.save_clipboard_image_macos()
            
            if temp_image_path:
                self.log("üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞")
                self.process_image_file(temp_image_path)
            else:
                try:
                    clipboard_text = self.root.clipboard_get()
                    if clipboard_text and clipboard_text.strip():
                        self.log("üìù –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞")
                        current_text = self.question_text.get(1.0, tk.END).strip()
                        if current_text:
                            self.question_text.insert(tk.END, "\n" + clipboard_text)
                        else:
                            self.question_text.insert(1.0, clipboard_text)
                    else:
                        self.log("‚ö†Ô∏è –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç")
                        messagebox.showinfo("–ü—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä", "–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
                except:
                    self.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
                    
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—Å—Ç–∞–≤–∫–∏: {e}")

    def update_history_length(self, event):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            new_length = self.history_length_var.get()
            if new_length.isdigit():
                self.max_history_length = int(new_length)
                self.log(f"üîÑ –î–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {self.max_history_length} —Å–æ–æ–±—â–µ–Ω–∏–π")
            else:
                self.log("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–ª–∏–Ω—ã –∏—Å—Ç–æ—Ä–∏–∏")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    def update_history_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        self.history_status.config(text=f"üí¨ –ò—Å—Ç–æ—Ä–∏—è: {len(self.conversation_history) // 2} —Å–æ–æ–±—â–µ–Ω–∏–π")

    def log_conversation_context(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞"""
        if self.conversation_history and self.context_enabled:
            self.log(f"üìö –û—Ç–ø—Ä–∞–≤–ª—è—é {len(self.conversation_history)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
        else:
            self.log("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")

    def toggle_context(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        self.context_enabled = not self.context_enabled
        if self.context_enabled:
            self.context_toggle_button.config(text="üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç: –í–ö–õ", bg='#4CAF50')
            self.log("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –≤–∫–ª—é—á–µ–Ω")
        else:
            self.context_toggle_button.config(text="üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç: –í–´–ö–õ", bg='#607D8B')
            self.log("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –≤—ã–∫–ª—é—á–µ–Ω")

    def clear_conversation_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        self.conversation_history = []
        self.update_history_status()
        self.log("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞")

    def quick_ocr_capture(self):
        """–ë—ã—Å—Ç—Ä—ã–π OCR –∑–∞—Ö–≤–∞—Ç"""
        self.start_screen_capture()

    def toggle_auto_scroll(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏"""
        self.auto_scroll = not self.auto_scroll
        if self.auto_scroll:
            self.auto_scroll_button.config(text="üìú –ê–≤—Ç–æ-\n–ø—Ä–æ–∫—Ä—É—Ç–∫–∞", bg='#4CAF50')
            self.log("‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞")
        else:
            self.auto_scroll_button.config(text="üìú –ê–≤—Ç–æ-\n–ø—Ä–æ–∫—Ä—É—Ç–∫–∞", bg='#607D8B')
            self.log("‚ùå –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")

    def setup_scroll_tracking(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏"""
        self.log_text.bind('<MouseWheel>', self.on_scroll)
        self.log_text.bind('<Button-4>', self.on_scroll)
        self.log_text.bind('<Button-5>', self.on_scroll)
        
        self.log_text.bind('<Up>', self.on_keyboard_scroll)
        self.log_text.bind('<Down>', self.on_keyboard_scroll)
        self.log_text.bind('<Prior>', self.on_keyboard_scroll)
        self.log_text.bind('<Next>', self.on_keyboard_scroll)

    def on_scroll(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –º—ã—à—å—é"""
        self.user_scrolling = True
        self.last_user_scroll_time = time.time()
        return None
        
    def on_keyboard_scroll(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        self.last_user_scroll_time = time.time()
        return None

    def smart_scroll_to_end(self):
        """–£–º–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ - –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        if not self.auto_scroll:
            return
            
        if time.time() - self.last_user_scroll_time < 3:
            return
            
        try:
            scroll_position = self.log_text.yview()[1]
            if scroll_position > 0.9:
                self.log_text.see(tk.END)
        except:
            self.log_text.see(tk.END)

    def is_user_at_bottom(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–Ω—Ü–µ —á–∞—Ç–∞"""
        try:
            scroll_position = self.log_text.yview()[1]
            return scroll_position > 0.95
        except:
            return True

    def jump_to_end(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ–Ω–µ—Ü —á–∞—Ç–∞"""
        self.log_text.see(tk.END)

if __name__ == "__main__":
    try:
        app = InterviewAssistantGUI()
        app.run()
    except KeyboardInterrupt:
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 