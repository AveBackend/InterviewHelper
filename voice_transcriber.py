#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import speech_recognition as sr
import requests
import json
import threading
import time
import sys
from datetime import datetime
import sseclient

class VoiceTranscriber:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        self.rust_api_url = "http://127.0.0.1:3030"
        
        self.setup_microphone()
        
        self.check_rust_service()

    def setup_microphone(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω"""
        try:
            print("üé§ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –º–∏–∫—Ä–æ—Ñ–æ–Ω...")
            with self.microphone as source:
                self.recognizer.adjust_for_ambient_noise(source, duration=1)
            print("‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≥–æ—Ç–æ–≤!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")

    def check_rust_service(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Rust —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            print("üîó –ü—Ä–æ–≤–µ—Ä—è—é Rust —Å–µ—Ä–≤–∏—Å...")
            response = requests.get(f"{self.rust_api_url}/health", timeout=5)
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Rust —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {data.get('service', 'unknown')}")
            else:
                raise Exception(f"HTTP {response.status_code}")
        except Exception as e:
            print(f"‚ùå Rust —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cargo run")
            sys.exit(1)

    def record_audio(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ"""
        try:
            print("\nüé§ –ó–ê–ü–ò–°–¨ –ù–ê–ß–ê–õ–ê–°–¨! –ì–æ–≤–æ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å...")
            print("‚è±Ô∏è  –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥. –ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")
            
            audio = None
            recording_complete = threading.Event()
            
            def record():
                nonlocal audio
                try:
                    with self.microphone as source:
                        audio = self.recognizer.listen(source, phrase_time_limit=30)
                    recording_complete.set()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
                    recording_complete.set()
            
            record_thread = threading.Thread(target=record)
            record_thread.daemon = True
            record_thread.start()
            
            input()
            print("üõë –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞...")
            
            recording_complete.wait(timeout=2)
            
            if audio:
                self.transcribe_and_process(audio)
            else:
                print("‚ùå –ê—É–¥–∏–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ")
                
        except KeyboardInterrupt:
            print("\nüõë –ó–∞–ø–∏—Å—å –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def transcribe_and_process(self, audio):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Rust —Å–µ—Ä–≤–∏—Å"""
        try:
            print("üîÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é —Ä–µ—á—å...")
            
            text = self.recognizer.recognize_google(audio, language="ru-RU")
            text = text.strip()
            
            if not text:
                print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
                return
                
            print(f"üéØ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {text}")
            print("ü¶Ä –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Rust —Å–µ—Ä–≤–∏—Å...")
            print("-" * 80)
            
            self.send_to_rust_streaming(text)
                
        except sr.UnknownValueError:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
        except sr.RequestError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")

    def send_to_rust_streaming(self, question):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ Rust —Å–µ—Ä–≤–∏—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç streaming –æ—Ç–≤–µ—Ç"""
        try:
            payload = {"question": question}
            
            response = requests.post(
                f"{self.rust_api_url}/stream",
                json=payload,
                headers={"Accept": "text/event-stream"},
                stream=True,
                timeout=60
            )
            
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ Rust API: {response.status_code}")
                return
            
            client = sseclient.SSEClient(response)
            full_response = []
            
            for event in client.events():
                if event.data:
                    try:
                        data = json.loads(event.data)
                        
                        if data['type'] == 'word':
                            print(data['content'], end=' ', flush=True)
                            full_response.append(data['content'])
                            
                        elif data['type'] == 'done':
                            print("\n" + "="*80)
                            print(f"üìÖ {datetime.now().strftime('%H:%M:%S')} - –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")
                            print(f"üí° –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {' '.join(full_response)}")
                            print("="*80)
                            break
                            
                        elif data['type'] == 'error':
                            print(f"\n‚ùå –û—à–∏–±–∫–∞: {data['content']}")
                            break
                            
                    except json.JSONDecodeError:
                        continue
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Rust API: {e}")

    def send_to_rust_simple(self, question):
        """–ü—Ä–æ—Å—Ç–æ–π non-streaming –∑–∞–ø—Ä–æ—Å (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            payload = {"question": question}
            
            response = requests.post(
                f"{self.rust_api_url}/ask",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                print("="*80)
                print(f"üìÖ {datetime.now().strftime('%H:%M:%S')}")
                print(f"‚ùì –í–û–ü–†–û–°: {question}")
                print("-"*80)
                print(f"üí° –û–¢–í–ï–¢ (RUST+OLLAMA):")
                print(data['content'])
                print("="*80)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Rust API: {e}")

    def show_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("\n" + "="*70)
        print("üé§ –ì–û–õ–û–°–û–í–û–ô –ü–û–ú–û–©–ù–ò–ö (Python + Rust)")
        print("="*70)
        print("1. üåä –ó–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å (STREAMING - –±—ã—Å—Ç—Ä–æ)")
        print("2. üìù –ó–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º)")
        print("3. üö™ –í—ã—Ö–æ–¥")
        print("="*70)

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("üöÄ Voice Transcriber + Rust Ollama Service")
        print("="*80)
        print("üêç Python: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–µ—á–∏ (Speech Recognition)")
        print("ü¶Ä Rust: Ollama API + –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å")
        print("‚ö° –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏")
        print("="*80)

        try:
            while True:
                self.show_menu()
                
                try:
                    choice = input("\nüëâ –í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
                    
                    if choice == '1':
                        print("üåä –†–µ–∂–∏–º: Streaming (—Å–ª–æ–≤–æ –∑–∞ —Å–ª–æ–≤–æ–º)")
                        self.record_audio()
                    elif choice == '2':
                        print("üìù –†–µ–∂–∏–º: –û–±—ã—á–Ω—ã–π (–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç)")
                        self.record_audio_simple()
                    elif choice == '3':
                        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                    else:
                        print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3")
                        
                except KeyboardInterrupt:
                    print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ Ctrl+C...")
                    break
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def record_audio_simple(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            print("\nüé§ –ó–ê–ü–ò–°–¨ –ù–ê–ß–ê–õ–ê–°–¨! –ì–æ–≤–æ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å...")
            print("‚è±Ô∏è  –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥. –ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")
            
            audio = None
            recording_complete = threading.Event()
            
            def record():
                nonlocal audio
                try:
                    with self.microphone as source:
                        audio = self.recognizer.listen(source, phrase_time_limit=30)
                    recording_complete.set()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
                    recording_complete.set()
            
            record_thread = threading.Thread(target=record)
            record_thread.daemon = True
            record_thread.start()
            
            input()
            print("üõë –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞...")
            recording_complete.wait(timeout=2)
            
            if audio:
                print("üîÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é —Ä–µ—á—å...")
                text = self.recognizer.recognize_google(audio, language="ru-RU")
                text = text.strip()
                
                if text:
                    print(f"üéØ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {text}")
                    print("ü¶Ä –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Rust —Å–µ—Ä–≤–∏—Å...")
                    self.send_to_rust_simple(text)
                else:
                    print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
            else:
                print("‚ùå –ê—É–¥–∏–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ")
                
        except sr.UnknownValueError:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
        except sr.RequestError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Voice Transcriber...")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Rust —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω: cargo run")
    print("")
    
    try:
        import speech_recognition
    except ImportError:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SpeechRecognition: pip install SpeechRecognition")
        sys.exit(1)
    
    try:
        import sseclient
    except ImportError:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ sseclient: pip install sseclient-py")
        sys.exit(1)
    
    try:
        import requests
    except ImportError:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ requests: pip install requests")
        sys.exit(1)
    
    transcriber = VoiceTranscriber()
    transcriber.run() 