#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import speech_recognition as sr
import requests
import json
import sys
import threading
import time
import subprocess
from datetime import datetime

class SimpleInterviewAssistant:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        
        self.config = self.load_config()
        self.ai_provider = self.config.get('ai_provider', 'ollama')
        
        self.history = []
        
        self.setup_microphone()

    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.json"""
        try:
            with open('config.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {
                "ai_provider": "ollama",
                "ollama": {
                    "base_url": "http://localhost:11434/api",
                    "model": "qwen2:7b"
                },
                "deepseek": {
                    "api_key": "",
                    "model": "deepseek-coder",
                    "base_url": "https://api.deepseek.com/v1"
                },
                "qwen": {
                    "api_key": "",
                    "model": "qwen-max",
                    "base_url": "https://dashscope.aliyuncs.com/compatible-mode/v1"
                }
            }

    def setup_microphone(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω"""
        try:
            print("üé§ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –º–∏–∫—Ä–æ—Ñ–æ–Ω...")
            with self.microphone as source:
                self.recognizer.adjust_for_ambient_noise(source, duration=1)
            print("‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≥–æ—Ç–æ–≤!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")

    def show_notification(self, title, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ macOS"""
        try:
            script = f'''
            display notification "{message}" with title "{title}" sound name "Glass"
            '''
            subprocess.run(['osascript', '-e', script], check=False)
        except:
            pass

    def record_audio(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ"""
        try:
            print("\nüé§ –ó–ê–ü–ò–°–¨ –ù–ê–ß–ê–õ–ê–°–¨! –ì–æ–≤–æ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å...")
            print("‚è±Ô∏è  –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥. –ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")
            
            self.show_notification("üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å", "–ì–æ–≤–æ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞")
            
            audio = None
            recording_complete = threading.Event()
            
            def record():
                nonlocal audio
                try:
                    with self.microphone as source:
                        audio = self.recognizer.listen(source, phrase_time_limit=30)
                    recording_complete.set()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
                    recording_complete.set()
            
            record_thread = threading.Thread(target=record)
            record_thread.daemon = True
            record_thread.start()
            
            input()
            print("üõë –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞...")
            
            recording_complete.wait(timeout=2)
            
            if audio:
                self.process_audio(audio)
            else:
                print("‚ùå –ê—É–¥–∏–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ")
                
        except KeyboardInterrupt:
            print("\nüõë –ó–∞–ø–∏—Å—å –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def process_audio(self, audio):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ"""
        try:
            print("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")
            self.show_notification("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ", "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ—á—å")
            
            try:
                text = self.recognizer.recognize_google(audio, language="ru-RU")
                text = text.strip()
                
                if not text:
                    print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
                    return
                    
                print(f"üéØ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
                self.show_notification("üéØ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ", text[:50] + "..." if len(text) > 50 else text)
                
                response = self.send_to_ai(text)
                
                if response:
                    self.history.append({
                        "timestamp": datetime.now().isoformat(),
                        "question": text,
                        "answer": response,
                        "provider": self.ai_provider
                    })
                    
                    self.show_answer(text, response)
                    self.show_notification("‚úÖ –ì–æ—Ç–æ–≤–æ!", "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI")
                
            except sr.UnknownValueError:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
                self.show_notification("‚ö†Ô∏è –ù–µ –ø–æ–Ω—è–ª", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ")
            except sr.RequestError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    def send_to_ai(self, question):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ AI –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        if self.ai_provider == "ollama":
            return self.send_to_ollama(question)
        elif self.ai_provider == "deepseek":
            return self.send_to_deepseek(question)
        elif self.ai_provider == "qwen":
            return self.send_to_qwen(question)
        else:
            return None

    def send_to_ollama(self, question):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ Ollama"""
        try:
            config = self.config.get('ollama', {})
            url = f"{config.get('base_url', 'http://localhost:11434/api')}/generate"
            
            payload = {
                "model": config.get('model', 'qwen2:7b'),
                "prompt": f"–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.\n\n–í–æ–ø—Ä–æ—Å: {question}",
                "stream": False
            }
            
            print("ü§ñ –ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç –æ—Ç Ollama...")
            response = requests.post(url, json=payload, timeout=30)
            
            if response.status_code == 200:
                return response.json().get('response', '')
            else:
                return None
                
        except Exception as e:
            return None

    def send_to_deepseek(self, question):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ DeepSeek API"""
        try:
            config = self.config.get('deepseek', {})
            api_key = config.get('api_key', '')
            
            if not api_key:
                return "‚ùå DeepSeek API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.json"
            
            headers = {
                "Authorization": f"Bearer {api_key}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": config.get('model', 'deepseek-coder'),
                "messages": [
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —á–µ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                    {"role": "user", "content": question}
                ],
                "max_tokens": 2000
            }
            
            print("ü§ñ –ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek...")
            response = requests.post(
                f"{config.get('base_url', 'https://api.deepseek.com/v1')}/chat/completions",
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()['choices'][0]['message']['content']
            else:
                return f"‚ùå DeepSeek –æ—à–∏–±–∫–∞: {response.status_code}"
                
        except Exception as e:
            return f"‚ùå DeepSeek –æ—à–∏–±–∫–∞: {str(e)}"

    def send_to_qwen(self, question):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ Qwen API"""
        try:
            config = self.config.get('qwen', {})
            api_key = config.get('api_key', '')
            
            if not api_key:
                return "‚ùå Qwen API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.json"
            
            headers = {
                "Authorization": f"Bearer {api_key}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": config.get('model', 'qwen-max'),
                "messages": [
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —á–µ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                    {"role": "user", "content": question}
                ],
                "max_tokens": 2000
            }
            
            print("ü§ñ –ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç –æ—Ç Qwen...")
            response = requests.post(
                f"{config.get('base_url', 'https://dashscope.aliyuncs.com/compatible-mode/v1')}/chat/completions",
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()['choices'][0]['message']['content']
            else:
                return f"‚ùå Qwen –æ—à–∏–±–∫–∞: {response.status_code}"
                
        except Exception as e:
            return f"‚ùå Qwen –æ—à–∏–±–∫–∞: {str(e)}"

    def show_answer(self, question, answer):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
        print("\n" + "="*80)
        print(f"üìÖ {datetime.now().strftime('%H:%M:%S')}")
        print(f"‚ùì –í–û–ü–†–û–°: {question}")
        print("-"*80)
        print(f"üí° –û–¢–í–ï–¢ ({self.ai_provider.upper()}):")
        print(answer)
        print("="*80)

    def show_history(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        if not self.history:
            print("üìù –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            return
        
        print("\n" + "="*80)
        print("üìù –ò–°–¢–û–†–ò–Ø –í–û–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í")
        print("="*80)
        
        for i, item in enumerate(self.history[-5:], 1):
            timestamp = datetime.fromisoformat(item['timestamp']).strftime('%H:%M:%S')
            print(f"\n{i}. [{timestamp}] {item['provider'].upper()}")
            print(f"‚ùì {item['question']}")
            print(f"üí° {item['answer'][:200]}..." if len(item['answer']) > 200 else f"üí° {item['answer']}")
            print("-"*40)
        
        print("="*80)

    def show_settings(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("\n" + "="*80)
        print("‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ò")
        print("="*80)
        print(f"ü§ñ –¢–µ–∫—É—â–∏–π AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.ai_provider.upper()}")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:")
        
        providers = {
            "ollama": "üêô Ollama (–ª–æ–∫–∞–ª—å–Ω—ã–π)",
            "deepseek": "üöÄ DeepSeek (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)",
            "qwen": "üåü Qwen (Alibaba)"
        }
        
        for key, desc in providers.items():
            status = "‚úÖ" if key == self.ai_provider else "‚≠ï"
            print(f"  {status} {desc}")
        
        print(f"\nüìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: config.json")
        print(f"üìù –ò—Å—Ç–æ—Ä–∏—è: {len(self.history)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        print("="*80)

    def show_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("\n" + "="*60)
        print("üìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
        print("="*60)
        print("1. üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        print("2. üìù –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("3. ‚öôÔ∏è  –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("4. üö™ –í—ã—Ö–æ–¥")
        print("="*60)

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("ü§ñ Interview Assistant - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        print("="*80)
        print(f"ü§ñ AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.ai_provider.upper()}")
        print("üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: Google Speech API")
        print("üíª –°–∏—Å—Ç–µ–º–∞: macOS (–±–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à)")
        print("")
        print("üí° –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
        print("   1. –í—ã–±–µ—Ä–∏—Ç–µ '1' –≤ –º–µ–Ω—é")
        print("   2. –ì–æ–≤–æ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞")
        print("   3. –ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ")
        print("   4. –ü–æ–ª—É—á–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ")
        print("="*80)
        
        self.show_notification("üöÄ Interview Assistant", "–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞!")

        try:
            while True:
                self.show_menu()
                
                try:
                    choice = input("\nüëâ –í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
                    
                    if choice == '1':
                        self.record_audio()
                    elif choice == '2':
                        self.show_history()
                    elif choice == '3':
                        self.show_settings()
                    elif choice == '4':
                        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        self.show_notification("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                    else:
                        print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 4")
                        
                except KeyboardInterrupt:
                    print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ Ctrl+C...")
                    break
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    required_packages = {
        'speech_recognition': 'pip install SpeechRecognition',
        'requests': 'pip install requests'
    }
    
    missing = []
    for package, install_cmd in required_packages.items():
        try:
            __import__(package)
        except ImportError:
            missing.append((package, install_cmd))
    
    if missing:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        for package, cmd in missing:
            print(f"   {cmd}")
        print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return False
    
    return True

def check_ai_provider(config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    provider = config.get('ai_provider', 'ollama')
    
    if provider == 'ollama':
        try:
            response = requests.get("http://localhost:11434/api/tags", timeout=5)
            return response.status_code == 200
        except:
            print("‚ùå Ollama –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: brew services start ollama")
            return False
    
    elif provider in ['deepseek', 'qwen']:
        api_key = config.get(provider, {}).get('api_key', '')
        if not api_key:
            print(f"‚ùå {provider.title()} API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.json")
            return False
        return True
    
    return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Interview Assistant (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
    print("")
    
    if not check_dependencies():
        sys.exit(1)
    
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
    except:
        print("‚ùå config.json –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
        sys.exit(1)
    
    if not check_ai_provider(config):
        print(f"üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ config.json")
        sys.exit(1)
    
    print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    print("")
    
    assistant = SimpleInterviewAssistant()
    assistant.run() 